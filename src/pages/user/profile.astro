---
import MainLayout from "../../layouts/MainLayout.astro"

import { getSupabase } from "../../lib/supabase"
const supabase = getSupabase()

const user = await Astro.locals.currentUser()
const userid = user?.id
const userFullname = user?.fullName
const userEmail = user?.emailAddresses?.[0]?.emailAddress;

import { Edit, Trash, X } from "lucide-react"
import toast from "react-hot-toast"

// Add cache control headers to prevent browser caching
Astro.response.headers.set('Cache-Control', 'no-store, max-age=0, must-revalidate');
Astro.response.headers.set('Pragma', 'no-cache');
Astro.response.headers.set('Expires', '0');

interface Author {
  id: string
  name: string;
  title: string;
  email: string;
  bio: string;
  post: {
    title: string;
    slug: string;
    tag:{
      name: string;
      slug: string;
    }[]
    content: string;
  }[]
}

const query = {
  method: "POST",
  headers: { "Content-Type": "application/json" },
  body: JSON.stringify({
    query: `
      {
        authors {
          id
          name
          title
          email
          bio
          post {
            title
            slug
            tag{
              name
            }
            content
          }
        }
      }
    `
  })
};

const response = await fetch(import.meta.env.HYGRAPH_API, query);
const json = await response.json();
const author: Author | undefined = json?.data?.authors?.find(
  (a: Author) => a.email === userEmail
);
const authorId = author?.id

const { data: saved } = await supabase
  .from('saved')
  .select('*')
  .eq('userid', userid!)
  .order('saved_at', { ascending: false });
---


<MainLayout>
  <div class="p-6 space-y-5 text-white" data-env={import.meta.env.PUBLIC_HYGRAPH_API}
  data-author-id={authorId}>
    {author && (
      <div class="space-y-2">
        <h1 class="text-4xl font-bold">{author.name}</h1>
        <h2 class="text-lg font-semibold text-gray-400">{author.title}</h2>
        <p class="text-sm text-gray-500 max-w-sm">{author.bio}</p>

        <section class="space-y-5 mt-10">
          <h2 class="text-2xl font-semibold">Posts created</h2>
          <div class="divide-y divide-[#2c2c2c] border border-[#2c2c2c] rounded-[20px] overflow-hidden" id="posts-container">
            {author.post.map(({ title, slug, tag, content }, i) => (
              <div
                class="flex justify-between items-center gap-5 px-6 py-4 bg-[#0e0e0e] hover:bg-[#1a1a1a] transition post-item"
                data-post-title={title}
                data-post-slug={slug}
              >
                <a href={`/blogs/${slug}`} class="flex gap-5 items-center text-white overflow-hidden">
                  <span class="text-sm text-gray-400">{i + 1}.</span>
                  <span class="text-base line-clamp-2">{title}</span>
                </a>
                <div class="flex gap-3 flex-shrink-0">
                  <button 
                    class="p-2 text-white bg-[#14100f] border border-[#3a2a1e] focus:outline-none  
                    cursor-pointer hover:text-blue-400 rounded-[10px] edit-post-btn" 
                    aria-label="Edit"
                    data-post-title={title}
                    data-post-slug={slug}
                    data-post-tags={tag.map(t => t.name).join(',')}
                    data-post-content={content}>
                      <Edit size={15} strokeWidth={1.5} />
                  </button>
                  <button 
                    class="p-2 text-white bg-[#14100f] border border-[#3a2a1e] focus:outline-none  
                    cursor-pointer hover:text-orange-400 rounded-[10px] delete-post-btn" 
                    aria-label="Delete"
                    data-post-title={title}
                    data-post-slug={slug}>
                      <Trash size={15} strokeWidth={1.5} />
                  </button>
                </div>
              </div>
            ))}
          </div>
        </section>
      </div>
    )}

    {saved && saved.length > 0 && (
      <section class="space-y-4" id="saved-container">
        <h3 class="text-2xl font-semibold">Saved</h3>
        <div class="flex gap-5 overflow-x-auto pb-2 scrollbar-hide" id="saved-items-container">
          {saved.map(({ title, slug }) => (
            <a
              href={`/blogs/${slug}`}
              class="min-w-[260px] max-w-32 sm:max-w-xs p-5 rounded-[20px] border border-[#2c2c2c] flex-shrink-0
              bg-gradient-to-br from-[#1a1a1a] to-[#0d0d0d] hover:brightness-110 transition saved-item"
              data-saved-slug={slug}
            >
              <h4 class="text-white line-clamp-2">{title}</h4>
            </a>
          ))}
        </div>
      </section>
    )}
  </div>

  <!-- Confirm Delete Dialog -->
  <div id="confirm-delete-dialog" class="fixed inset-0 z-50 items-center justify-center hidden p-5">
    <div class="absolute inset-0 bg-black bg-opacity-50" id="dialog-overlay"></div>
    <div class="relative z-10 bg-[#0e0e0e] border border-[#2c2c2c] rounded-[20px] p-5 w-full sm:max-w-md mx-auto">
      <div class="flex justify-between items-center mb-4">
        <h3 class="text-xl font-semibold text-white">Confirm Delete</h3>
        <button 
          id="close-dialog-btn"
          class="p-2 text-white bg-[#14100f] border border-[#3a2a1e] hover:text-orange-400 
          rounded-[8px] cursor-pointer" 
          aria-label="Close dialog"
        >
          <X size={16} strokeWidth={1.5} />
        </button>
      </div>
      
      <p class="text-gray-300 mb-6">
        Are you sure you want to delete this post?<br>
        <span id="post-title-to-delete" class="font-semibold text-white"></span>
      </p>
      
      <div class="flex justify-end gap-3">
        <button 
          id="cancel-delete-btn"
          class="px-6 py-3 text-white bg-[#14100f] border border-[#3a2a1e] 
          hover:bg-[#1b1613] transition-colors rounded-[16px] cursor-pointer"
        >
          Cancel
        </button>
        <button 
          id="confirm-delete-btn"
          class="px-6 py-3 text-white bg-[#8E1616] border border-red-900 
          hover:bg-red-950 transition-colors rounded-[16px] cursor-pointer"
        >
          Delete
        </button>
      </div>
    </div>
  </div>

  <!-- Edit Post Dialog -->
  <div id="edit-post-dialog" class="fixed inset-0 z-50 items-center justify-center hidden p-5">
    <div class="absolute inset-0 bg-black bg-opacity-50" id="edit-dialog-overlay"></div>
    <div class="relative z-10 bg-[#0e0e0e] border border-[#2c2c2c] rounded-[20px] p-5 max-w-3xl mx-auto w-full">
      <div class="flex justify-between items-center mb-5">
        <h3 class="text-xl font-semibold text-white">Edit Post</h3>
        <button 
          id="close-edit-dialog-btn"
          class="p-2 text-white bg-[#14100f] border border-[#3a2a1e] hover:text-blue-400 
          rounded-[8px] cursor-pointer" 
          aria-label="Close edit dialog"
        >
          <X size={16} strokeWidth={1.5} />
        </button>
      </div>
      
      <form id="edit-post-form" class="space-y-5">
        <input type="hidden" id="edit-post-slug">
        <input type="hidden" id="edit-original-slug">
        
        <div>
          <label for="edit-post-title" class="block text-sm font-medium text-gray-300 mb-2">Title</label>
          <input 
            type="text" 
            id="edit-post-title" 
            class="w-full px-4 py-3 bg-[#1a1a1a] border border-[#2c2c2c] rounded-[16px] 
            focus:outline-none focus:border-[#3A59D1] text-white"
            placeholder="Post title"
          >
        </div>
        
        <div>
          <label for="edit-post-tags" class="block text-sm font-medium text-gray-300 mb-2">Tags (comma-separated)</label>
          <input 
            type="text" 
            id="edit-post-tags" 
            class="w-full px-4 py-3 bg-[#1a1a1a] border border-[#2c2c2c] rounded-[16px] 
            focus:outline-none focus:border-[#3A59D1] text-white"
            placeholder="tag1, tag2, tag3"
          >
        </div>
        
        <div>
          <label for="edit-post-content" class="block text-sm font-medium text-gray-300 mb-2">Content</label>
          <textarea 
            id="edit-post-content" 
            class="w-full px-4 py-3 bg-[#1a1a1a] border border-[#2c2c2c] rounded-[16px] 
            focus:outline-none focus:border-[#3A59D1] text-white h-64 resize-none"
            placeholder="Post content"
          ></textarea>
        </div>
        
        <div class="flex justify-end gap-3">
          <button 
            type="button"
            id="cancel-edit-btn"
            class="px-6 py-3 text-white bg-[#14100f] border border-[#3a2a1e] 
            hover:bg-[#1b1613] transition-colors rounded-[16px] cursor-pointer"
          >
            Cancel
          </button>
          <button 
            type="submit"
            id="submit-edit-btn"
            class="px-6 py-3 text-white bg-[#3A59D1] border border-[#3A59D1] 
            hover:bg-blue-900 transition-colors rounded-[16px] cursor-pointer"
          >
            Update Post
          </button>
        </div>
      </form>
    </div>
  </div>
</MainLayout>

<style>
  /* Line clamp for title truncation */
  .line-clamp-2 {
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
    text-overflow: ellipsis;
  }
</style>

<script>
  import toast from "react-hot-toast";

  document.addEventListener('DOMContentLoaded', () => {
    // Add event listener for page visibility changes
    document.addEventListener('visibilitychange', () => {
      // When the page becomes visible again (e.g., after returning via back button)
      if (document.visibilityState === 'visible') {
        // Force refresh to get the latest data
        window.location.reload();
      }
    });

    // Delete Post Functionality
    const deleteButtons = document.querySelectorAll('.delete-post-btn');
    const confirmDialog = document.getElementById('confirm-delete-dialog');
    const closeDialogBtn = document.getElementById('close-dialog-btn');
    const cancelDeleteBtn = document.getElementById('cancel-delete-btn');
    const confirmDeleteBtn = document.getElementById('confirm-delete-btn');
    const dialogOverlay = document.getElementById('dialog-overlay');
    const postTitleToDelete = document.getElementById('post-title-to-delete');
    const postsContainer = document.getElementById('posts-container');
    const savedItemsContainer = document.getElementById('saved-items-container');
    const savedContainer = document.getElementById('saved-container');

    // Edit Post Functionality
    const editButtons = document.querySelectorAll('.edit-post-btn');
    const editDialog = document.getElementById('edit-post-dialog');
    const closeEditDialogBtn = document.getElementById('close-edit-dialog-btn');
    const cancelEditBtn = document.getElementById('cancel-edit-btn');
    const editDialogOverlay = document.getElementById('edit-dialog-overlay');
    const editPostForm = document.getElementById('edit-post-form') as HTMLFormElement;
    const editPostSlugInput = document.getElementById('edit-post-slug') as HTMLInputElement;
    const editOriginalSlugInput = document.getElementById('edit-original-slug') as HTMLInputElement;
    const editPostTitleInput = document.getElementById('edit-post-title') as HTMLInputElement;
    const editPostTagsInput = document.getElementById('edit-post-tags') as HTMLInputElement;
    const editPostContentInput = document.getElementById('edit-post-content') as HTMLTextAreaElement;

    let currentPostTitle = '';
    let currentPostSlug = '';
    let currentPostElement: HTMLElement | null = null;

    // Delete dialog functions
    function openDeleteDialog(title: any, slug: any, element: any) {
      currentPostTitle = title;
      currentPostSlug = slug;
      currentPostElement = element;

      if (postTitleToDelete) {
        postTitleToDelete.textContent = title;
      }
      confirmDialog?.classList.remove('hidden');
      confirmDialog?.classList.add('flex');
    }

    function closeDeleteDialog() {
      confirmDialog?.classList.add('hidden');
      confirmDialog?.classList.remove('flex');
      currentPostTitle = '';
      currentPostSlug = '';
      currentPostElement = null;
    }

    // Edit dialog functions
    function openEditDialog(title: string, slug: string, tags: string = '', content: string = '') {
      editPostSlugInput.value = slug; // Store the current slug
      editOriginalSlugInput.value = slug; // Store the original slug
      editPostTitleInput.value = title;
      editPostTagsInput.value = tags;
      editPostContentInput.value = content;

      editDialog?.classList.remove('hidden');
      editDialog?.classList.add('flex');
    }

    function closeEditDialog() {
      editDialog?.classList.add('hidden');
      editDialog?.classList.remove('flex');
    }

    // Delete event listeners
    deleteButtons.forEach(button => {
      button.addEventListener('click', (e) => {
        e.preventDefault();
        e.stopPropagation();

        const postItem = button.closest('.post-item');
        const title = button.getAttribute('data-post-title');
        const slug = button.getAttribute('data-post-slug');

        if (title && slug && postItem) {
          openDeleteDialog(title, slug, postItem);
        }
      });
    });

    closeDialogBtn?.addEventListener('click', closeDeleteDialog);
    cancelDeleteBtn?.addEventListener('click', closeDeleteDialog);
    dialogOverlay?.addEventListener('click', closeDeleteDialog);

    // Edit event listeners
    editButtons.forEach(button => {
      button.addEventListener('click', (e) => {
        e.preventDefault();
        e.stopPropagation();

        const title = button.getAttribute('data-post-title') || '';
        const slug = button.getAttribute('data-post-slug') || '';
        const tags = button.getAttribute('data-post-tags') || '';
        const content = button.getAttribute('data-post-content') || '';

        openEditDialog(title, slug, tags, content);
      });
    });

    closeEditDialogBtn?.addEventListener('click', closeEditDialog);
    cancelEditBtn?.addEventListener('click', closeEditDialog);
    editDialogOverlay?.addEventListener('click', closeEditDialog);

    function slugify(text: string): string {
      return text
        .toLowerCase()
        .trim()
        .replace(/\s+/g, "-")
        .replace(/[^\w\-]+/g, "")
        .replace(/\-\-+/g, "-");
    }

    // Submit edit form
    editPostForm?.addEventListener('submit', async (e) => {
      e.preventDefault();
      
      const submitBtn = document.getElementById('submit-edit-btn');
      if (!submitBtn) return;
      
      const originalBtnText = submitBtn.textContent;
      submitBtn.textContent = 'Updating...';
      submitBtn.setAttribute('disabled', 'true');

      const authorIdElement = document.querySelector('[data-author-id]');
      const authorId = authorIdElement ? authorIdElement.getAttribute('data-author-id') : null;
      
      const newTitle = editPostTitleInput.value;
      const newSlug = slugify(newTitle);
      const originalSlug = editOriginalSlugInput.value;

              const updatedData = {
        originalSlug: originalSlug, // Send the original slug to the API for reference
        slug: editPostSlugInput.value, // Keep using the original slug for the API request
        newSlug: newSlug, // Send the new slug as a separate field
        title: newTitle,
        tags: editPostTagsInput.value.split(',').map(tag => tag.trim()).filter(tag => tag),
        content: editPostContentInput.value,
        authorId: authorId
      };
      
      try {
        const response = await fetch('/api/update', {
          method: 'POST',
          headers: { 
            'Content-Type': 'application/json',
            'Cache-Control': 'no-cache'
          },
          body: JSON.stringify(updatedData),
        });

        if (!response.ok) {
          const err = await response.json();
          toast.error(err.message || 'Failed to update post');
          return;
        }

        // Update the post in the UI
        const postElement = document.querySelector(`.post-item[data-post-slug="${originalSlug}"]`);
        if (postElement) {
          const titleSpan = postElement.querySelector('.line-clamp-2');
          if (titleSpan) titleSpan.textContent = updatedData.title;

          const anchorTag = postElement.querySelector('a') as HTMLAnchorElement;
          if (anchorTag) {
            anchorTag.href = `/blogs/${newSlug}`;
          }
          
          // Update data attributes for the post item
          postElement.setAttribute('data-post-title', updatedData.title);
          postElement.setAttribute('data-post-slug', newSlug);
          
          // Update edit button data attributes
          const editBtn = postElement.querySelector('.edit-post-btn');
          if (editBtn) {
            editBtn.setAttribute('data-post-title', updatedData.title);
            editBtn.setAttribute('data-post-slug', newSlug);
            editBtn.setAttribute('data-post-tags', updatedData.tags.join(','));
            editBtn.setAttribute('data-post-content', updatedData.content);
          }
          
          // Update delete button data attribute
          const deleteBtn = postElement.querySelector('.delete-post-btn');
          if (deleteBtn) {
            deleteBtn.setAttribute('data-post-title', updatedData.title);
            deleteBtn.setAttribute('data-post-slug', newSlug);
          }
        }
        
        // Also update in saved section if present
        const savedItem = document.querySelector(`.saved-item[data-saved-slug="${originalSlug}"]`) as HTMLAnchorElement;
        if (savedItem) {
          const titleEl = savedItem.querySelector('h4');
          if (titleEl) titleEl.textContent = updatedData.title;
          savedItem.href = `/blogs/${newSlug}`;
          savedItem.setAttribute('data-saved-slug', newSlug);
        }

        // Store updated info in sessionStorage to handle back button navigation
        sessionStorage.setItem(`post_${newSlug}`, JSON.stringify({
          title: updatedData.title,
          slug: newSlug,
          originalSlug: originalSlug,
          tags: updatedData.tags.join(','),
          content: updatedData.content
        }));

        closeEditDialog();
        toast.success('Post updated successfully');
        
      } catch (err) {
        console.error(err);
        toast.error('Network error while updating post');
      } finally {
        submitBtn.textContent = originalBtnText;
        submitBtn.removeAttribute('disabled');
      }
    });

    // Delete functionality
    confirmDeleteBtn?.addEventListener('click', async () => {
      if (!currentPostSlug) return;

      confirmDeleteBtn.textContent = 'Deleting...';

      try {
        const response = await fetch('/api/delete', {
          method: 'POST',
          headers: { 
            'Content-Type': 'application/json',
            'Cache-Control': 'no-cache'
          },
          body: JSON.stringify({ slug: currentPostSlug }),
        });

        if (!response.ok) {
          const err = await response.json();
          toast.error(err.message || 'Failed to delete');
          return;
        }

        console.log(`user deleted post: ${currentPostTitle}`);

        // Remove from posts section
        if (currentPostElement && postsContainer) {
          currentPostElement.remove();
          const remaining = postsContainer.querySelectorAll('.post-item');
          remaining.forEach((item, index) => {
            const number = item.querySelector('.text-gray-400');
            if (number) number.textContent = `${index + 1}.`;
          });
        }

        // Also remove from saved section if it exists there
        if (savedItemsContainer) {
          const savedItem = savedItemsContainer.querySelector(`[data-saved-slug="${currentPostSlug}"]`);
          if (savedItem) {
            savedItem.remove();
            
            // If there are no more saved items, hide the entire saved section
            const remainingSavedItems = savedItemsContainer.querySelectorAll('.saved-item');
            if (remainingSavedItems.length === 0 && savedContainer) {
              savedContainer.classList.add('hidden');
            }
          }
        }

        // Mark as deleted in sessionStorage
        sessionStorage.setItem(`deleted_post_${currentPostSlug}`, 'true');

        closeDeleteDialog();
        
      } catch (err) {
        console.error(err);
        toast.error('Network error');
      } finally {
        confirmDeleteBtn.textContent = 'Delete';
      }
    });

    // Handle Escape key for both dialogs
    document.addEventListener('keydown', (e) => {
      if (e.key === 'Escape') {
        closeDeleteDialog();
        closeEditDialog();
      }
    });

    // Function to check and apply any stored updates that might have occurred
    function applyStoredUpdates() {
      // Check for all items in sessionStorage that start with 'post_'
      Object.keys(sessionStorage).forEach(key => {
        if (key.startsWith('post_')) {
          try {
            const storedData = JSON.parse(sessionStorage.getItem(key) || '{}');
            const { title, slug, originalSlug, tags, content } = storedData;
            
            // Find post by original slug
            const postElement = document.querySelector(`.post-item[data-post-slug="${originalSlug}"]`);
            if (postElement) {
              // Update the element with new data
              const titleSpan = postElement.querySelector('.line-clamp-2');
              if (titleSpan) titleSpan.textContent = title;

              const anchorTag = postElement.querySelector('a') as HTMLAnchorElement;
              if (anchorTag) anchorTag.href = `/blogs/${slug}`;
              
              postElement.setAttribute('data-post-title', title);
              postElement.setAttribute('data-post-slug', slug);
              
              // Update buttons
              const editBtn = postElement.querySelector('.edit-post-btn');
              if (editBtn) {
                editBtn.setAttribute('data-post-title', title);
                editBtn.setAttribute('data-post-slug', slug);
                editBtn.setAttribute('data-post-tags', tags);
                editBtn.setAttribute('data-post-content', content);
              }
              
              const deleteBtn = postElement.querySelector('.delete-post-btn');
              if (deleteBtn) {
                deleteBtn.setAttribute('data-post-title', title);
                deleteBtn.setAttribute('data-post-slug', slug);
              }
            }
            
            // Update in saved section if present
            const savedItem = document.querySelector(`.saved-item[data-saved-slug="${originalSlug}"]`) as HTMLAnchorElement;
            if (savedItem) {
              const titleEl = savedItem.querySelector('h4');
              if (titleEl) titleEl.textContent = title;
              savedItem.href = `/blogs/${slug}`;
              savedItem.setAttribute('data-saved-slug', slug);
            }
          } catch (e) {
            console.error('Error applying stored updates:', e);
          }
        }
      });
      
      // Check for deleted posts
      Object.keys(sessionStorage).forEach(key => {
        if (key.startsWith('deleted_post_')) {
          const deletedSlug = key.replace('deleted_post_', '');
          
          // Remove from posts section if it exists
          const postElement = document.querySelector(`.post-item[data-post-slug="${deletedSlug}"]`);
          if (postElement && postsContainer) {
            postElement.remove();
            // Update numbering
            const remaining = postsContainer.querySelectorAll('.post-item');
            remaining.forEach((item, index) => {
              const number = item.querySelector('.text-gray-400');
              if (number) number.textContent = `${index + 1}.`;
            });
          }
          
          // Remove from saved section if it exists
          if (savedItemsContainer) {
            const savedItem = savedItemsContainer.querySelector(`[data-saved-slug="${deletedSlug}"]`);
            if (savedItem) {
              savedItem.remove();
              
              // If there are no more saved items, hide the entire saved section
              const remainingSavedItems = savedItemsContainer.querySelectorAll('.saved-item');
              if (remainingSavedItems.length === 0 && savedContainer) {
                savedContainer.classList.add('hidden');
              }
            }
          }
        }
      });
    }

    // Apply any stored updates when page loads
    applyStoredUpdates();

    // Listen for popstate events (browser back/forward navigation)
    window.addEventListener('popstate', () => {
      // Apply stored updates when navigating back
      applyStoredUpdates();
    });
  });
</script>