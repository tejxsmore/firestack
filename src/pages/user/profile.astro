---
import MainLayout from "../../layouts/MainLayout.astro"
import { getSupabase } from "../../lib/supabase"
const supabase = getSupabase()

const user = await Astro.locals.currentUser()
const userid = user?.id
const userFullname = user?.fullName
const userEmail = user?.emailAddresses[0].emailAddress

import { Edit, Trash, X } from "lucide-react"

interface Author {
  name: string;
  title: string;
  email: string;
  bio: string;
  post: {
    title: string;
    slug: string;
  }[]
}

const query = {
  method: "POST",
  headers: { "Content-Type": "application/json" },
  body: JSON.stringify({
    query: `
      {
        authors {
          name
          title
          email
          bio
          post {
            title
            slug
          }
        }
      }
    `
  })
};

const response = await fetch(import.meta.env.HYGRAPH_API, query);
const json = await response.json();
const author: Author | undefined = json?.data?.authors?.find(
  (a: Author) => a.email === userEmail
);

const { data: liked } = await supabase
  .from('liked')
  .select('*')
  .eq('userid', userid!)
  .order('liked_at', { ascending: false });

const { data: saved } = await supabase
  .from('saved')
  .select('*')
  .eq('userid', userid!)
  .order('saved_at', { ascending: false });
---


<MainLayout>
  <div class="p-6 space-y-5 text-white" data-env={import.meta.env.PUBLIC_HYGRAPH_API}>
    {author && (
      <div class="space-y-2">
        <h1 class="text-4xl font-bold">{author.name}</h1>
        <h2 class="text-lg font-semibold text-gray-400">{author.title}</h2>
        <p class="text-sm text-gray-500">{author.bio}</p>

        <section class="space-y-5">
          <h2 class="text-2xl font-semibold">Posts created</h2>
          <div class="divide-y divide-[#2c2c2c] border border-[#2c2c2c] rounded-[20px] overflow-hidden" id="posts-container">
            {author.post.map(({ title, slug }, i) => (
              <div
                class="flex justify-between items-center gap-5 px-6 py-4 bg-[#0e0e0e] hover:bg-[#1a1a1a] transition post-item"
                data-post-title={title}
                data-post-slug={slug}
              >
                <a href={`/blogs/${slug}`} class="flex gap-5 items-center text-white overflow-hidden">
                  <span class="text-sm text-gray-400">{i + 1}.</span>
                  <span class="text-base line-clamp-2">{title}</span>
                </a>
                <div class="flex gap-3 flex-shrink-0">
                  <button 
                    class="p-2 text-white bg-[#14100f] border border-[#3a2a1e]  
                    cursor-pointer hover:text-orange-400 rounded-[10px] focus:outline-none" 
                    aria-label="Edit">
                    <Edit size={15} strokeWidth={1.5} />
                  </button>
                  <button 
                    class="p-2 text-white bg-[#14100f] border border-[#3a2a1e] focus:outline-none  
                    cursor-pointer hover:text-orange-400 rounded-[10px] delete-post-btn" 
                    aria-label="Delete"
                    data-post-title={title}
                    data-post-slug={slug}>
                      <Trash size={15} strokeWidth={1.5} />
                  </button>
                </div>
              </div>
            ))}
          </div>
        </section>
      </div>
    )}

    {saved && saved.length > 0 && (
      <section class="space-y-4">
        <h3 class="text-2xl font-semibold">Saved</h3>
        <div class="flex gap-5 overflow-x-auto pb-2 scrollbar-hide">
          {saved.map(({ title, slug }) => (
            <a
              href={`/blogs/${slug}`}
              class="min-w-[260px] max-w-32 sm:max-w-xs p-5 rounded-[20px] border border-[#2c2c2c] flex-shrink-0
              bg-gradient-to-br from-[#1a1a1a] to-[#0d0d0d] hover:brightness-110 transition"
            >
              <h4 class="text-white line-clamp-2">{title}</h4>
            </a>
          ))}
        </div>
      </section>
    )}

    {liked && liked.length > 0 && (
      <section class="space-y-4">
        <h3 class="text-2xl font-semibold">Liked</h3>
        <div class="flex gap-5 overflow-x-auto pb-2 scrollbar-hide">
          {liked.map(({ title, slug }) => (
            <a
              href={`/blogs/${slug}`}
              class="min-w-[260px] max-w-32 sm:max-w-xs p-5 rounded-[20px] border border-[#2c2c2c] flex-shrink-0
              bg-gradient-to-br from-[#1a1a1a] to-[#0d0d0d] hover:brightness-110 transition"
            >
              <h4 class="text-white line-clamp-2">{title}</h4>
            </a>
          ))}
        </div>
      </section>
    )}
  </div>

  <!-- Confirm Delete Dialog -->
  <div id="confirm-delete-dialog" class="fixed inset-0 z-50 items-center justify-center hidden p-5">
    <div class="absolute inset-0 bg-black bg-opacity-50" id="dialog-overlay"></div>
    <div class="relative z-10 bg-[#0e0e0e] border border-[#2c2c2c] rounded-[20px] p-6 max-w-md mx-auto mt-20">
      <div class="flex justify-between items-center mb-4">
        <h3 class="text-xl font-semibold text-white">Confirm Delete</h3>
        <button 
          id="close-dialog-btn" 
          class="p-2 text-white bg-[#14100f] border border-[#3a2a1e] hover:text-orange-400 rounded-[8px]" 
          aria-label="Close dialog"
        >
          <X size={16} strokeWidth={1.5} />
        </button>
      </div>
      
      <p class="text-gray-300 mb-6">
        Are you sure you want to delete this post?<br>
        <span id="post-title-to-delete" class="font-semibold text-white"></span>
      </p>
      
      <div class="flex justify-end gap-3">
        <button 
          id="cancel-delete-btn"
          class="px-6 py-3 text-white bg-[#14100f] border border-[#3a2a1e] 
          hover:bg-[#1b1613] transition-colors rounded-[16px] cursor-pointer"
        >
          Cancel
        </button>
        <button 
          id="confirm-delete-btn"
          class="px-6 py-3 text-white bg-[#8E1616] border border-red-900 
          hover:bg-red-950 transition-colors rounded-[16px] cursor-pointer"
        >
          Delete
        </button>
      </div>
    </div>
  </div>
</MainLayout>

<style>
  /* Line clamp for title truncation */
  .line-clamp-2 {
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
    text-overflow: ellipsis;
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const deleteButtons = document.querySelectorAll('.delete-post-btn');
    const confirmDialog = document.getElementById('confirm-delete-dialog');
    const closeDialogBtn = document.getElementById('close-dialog-btn');
    const cancelDeleteBtn = document.getElementById('cancel-delete-btn');
    const confirmDeleteBtn = document.getElementById('confirm-delete-btn');
    const dialogOverlay = document.getElementById('dialog-overlay');
    const postTitleToDelete = document.getElementById('post-title-to-delete');
    const postsContainer = document.getElementById('posts-container');

    let currentPostTitle = '';
    let currentPostSlug = '';
    let currentPostElement: HTMLElement | null = null;

    function openDeleteDialog(title: any, slug: any, element: any) {
      currentPostTitle = title;
      currentPostSlug = slug;
      currentPostElement = element;

      if (postTitleToDelete) {
        postTitleToDelete.textContent = title;
      }
      confirmDialog?.classList.remove('hidden');
      confirmDialog?.classList.add('flex');
    }

    function closeDeleteDialog() {
      confirmDialog?.classList.add('hidden');
      confirmDialog?.classList.remove('flex');
      currentPostTitle = '';
      currentPostSlug = '';
      currentPostElement = null;
    }

    deleteButtons.forEach(button => {
      button.addEventListener('click', (e) => {
        e.preventDefault();
        e.stopPropagation();

        const postItem = button.closest('.post-item');
        const title = button.getAttribute('data-post-title');
        const slug = button.getAttribute('data-post-slug');

        if (title && slug && postItem) {
          openDeleteDialog(title, slug, postItem);
        }
      });
    });

    closeDialogBtn?.addEventListener('click', closeDeleteDialog);
    cancelDeleteBtn?.addEventListener('click', closeDeleteDialog);
    dialogOverlay?.addEventListener('click', closeDeleteDialog);

    confirmDeleteBtn?.addEventListener('click', async () => {
      if (!currentPostSlug) return;

      confirmDeleteBtn.textContent = 'Deleting...';

      try {
        const response = await fetch('/api/delete', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ slug: currentPostSlug }),
        });

        if (!response.ok) {
          const err = await response.json();
          alert(err.message || 'Failed to delete');
          return;
        }

        console.log(`user deleted this ${currentPostTitle}`);

        if (currentPostElement && postsContainer) {
          currentPostElement.remove();
          const remaining = postsContainer.querySelectorAll('.post-item');
          remaining.forEach((item, index) => {
            const number = item.querySelector('.text-gray-400');
            if (number) number.textContent = `${index + 1}.`;
          });
        }

        closeDeleteDialog();
      } catch (err) {
        console.error(err);
        alert('Network error');
      } finally {
        confirmDeleteBtn.textContent = 'Delete';
      }
    });

    document.addEventListener('keydown', (e) => {
      if (e.key === 'Escape') closeDeleteDialog();
    });
  });
</script>